#!/bin/bash
block_device_root=$(grub-probe / --target=device)
default_root="@base_system"
update_grub_command="grub-mkconfig -o /boot/grub/grub.cfg"
transactional_dir=$(mktemp -d -p /tmp)
toplevel_dir=$(mktemp -d -p /tmp)
actual_root_array=($(btrfs su show /))
emergency_id=${actual_root_array[18]}
function pre_mount_work(){
mount $block_device_root $toplevel_dir -o "subvolid="5
}
function transactional_operation(){
    btrfs su snap $toplevel_dir/$default_root $toplevel_dir/@transactional_branch &&\
      mount $block_device_root $transactional_dir -o "subvol="@transactional_branch &&\
      btrfs filesystem sync $toplevel_dir
}
function bind_mount(){
    mkdir -p /var/cache/pacman/pkg
      mount --bind /usr/local/ $transactional_dir/usr/local/ &&\
      mount --bind /etc/grub.d $transactional_dir/etc/grub.d &&\
      mount --bind /etc/default/grub $transactional_dir/etc/default/grub &&\
      mount --bind /etc/default/grub-btrfs/ $transactional_dir/etc/default/grub-btrfs/ &&\
      mount --bind /etc/pacman.d/ $transactional_dir/etc/pacman.d &&\
      mount --bind /etc/pacman.conf $transactional_dir/etc/pacman.conf &&\
      mount --bind /etc/mkinitcpio.conf $transactional_dir/etc/mkinitcpio.conf &&\
      mount --bind /etc/mkinitcpio.d $transactional_dir/etc/mkinitcpio.d &&\
      mount --bind /var/cache/pacman/pkg $transactional_dir/var/cache/pacman/pkg
}
function manage_branch(){
    manage_branch_1
}
function manage_branch_1(){
    moment=$(date +%Y-%m-%d--%H-%M-%S)
    branch_name="@branch-root-pre-pacman--$moment"
    umount -Rv $transactional_dir &&\
    mv $toplevel_dir/$default_root $toplevel_dir/$branch_name &&\
    status="rootmoved" &&\
    manage_branch_error || manage_branch_error
    }
function manage_branch_2(){
    status="none"
    btrfs filesystem sync $toplevel_dir &&\
    mv $toplevel_dir/@transactional_branch $toplevel_dir/$default_root &&\
    status="transactionalmoved" &&\
    manage_branch_error || manage_branch_error
}
function manage_branch_3(){
    status="none" &&\
    btrfs filesystem sync $toplevel_dir &&\
    mount $block_device_root $transactional_dir -o "subvol="$default_root &&
    status="newrootmount" &&\
    manage_branch_error || manage_branch_error
}
function manage_branch_error(){
    if [ $status == "rootmoved" ] ; then
        manage_branch_2
    elif [ $status == "transactionalmoved" ] ; then
        manage_branch_3
    elif [ $status == "newrootmount" ] ; then
        status="newrootmount"
    elif [ $status == "error" ] || [ $status == "none" ] ; then
        echo "ocorreu um erro transacional, movendo para o root atualmente em uso via base-manager --restore-root" &&
        reason="pacman" id_to_restore=$emergency_id  base-manager "--restore-root-pacman"
    else
        echo "ocorreu um erro transacional desconhecido. Abortando imediatamente. Confira manualmente o estado do sistema de arquivos e a lista de subvolumes. Se não houver nenhum chamado $default_root, o próximo boot falhará. O código de erro foi $err" && exit 1
    fi
}
function bootloader_update(){
    bind_mount &&
    arch-chroot $transactional_dir $update_grub_command
}
function end_base_manager(){
    if [ -d $toplevel_dir/$default_root ] ; then
	    btrfs filesystem sync $toplevel_dir &&\
	    execute=$(btrfs property set -ts $toplevel_dir/$default_root ro true) &&\
    	btrfs filesystem sync $toplevel_dir &&\
    	umount -Rv $transactional_dir &&\
	    umount -Rv $toplevel_dir &&
	    rmdir $transactional_dir &&
	    rmdir $toplevel_dir
    else
        status="error" &&
        manage_branch_error
    fi
}
function end_base_manager_error(){
    umount -Rv $transactional_dir &&\
    umount -Rv $toplevel_dir &&\
    rmdir $transactional_dir && rmdir $toplevel_dir
}
function update_grub(){
   bootloader_update
       if [ $? -eq 0 ] ; then
           end_base_manager
       else
           echo "a atualização do bootloader na nova branch saiu com status de erro, revertendo transação" && update_grub_error
       fi
}
function update_grub_error(){
    moment=$(date +%Y-%m-%d--%H-%M-%S)
    umount -Rv $transactional_dir &&\
    mv $toplevel_dir/$default_root $toplevel_dir/@branch-deprecated-pos-pacman-grub-error--$moment &&\
    mv $toplevel_dir/$branch_name $toplevel_dir/$default_root &&\
    umount -Rv $toplevel_dir &&\
    rmdir $transactional_dir &&\
    rmdir $toplevel_dir &&\
    echo "transação revertida para a branch válida mais recente devido a um erro anterior"
}

function decision_pac(){
    	if [ $err -eq 0 ] ; then
		exit_pac_base_sucess
	else
		umount -Rv $transactional_dir &&\
		btrfs su del $toplevel_dir/@transactional_branch &&\
		umount -Rv $toplevel_dir &&\
		rmdir $transactional_dir &&\
		rmdir $toplevel_dir &&\
        echo "transação abortada devido a um erro anterior"
	fi
}
function exit_pac_base_sucess(){
    manage_branch && 
	if [ $status == "newrootmount" ] ; then
    update_grub
	else
        status="error" &&
        manage_branch_error
	fi
}
function run_pac_base (){
	pre_mount_work
	transactional_operation
    bind_mount
    arch-chroot $transactional_dir pacman $command_pacman
    err=$?
    decision_pac
}
command_pacman=$@
run_pac_base
